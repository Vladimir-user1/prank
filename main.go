package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/joho/godotenv"
)

func main() {

	// –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ
	if _, ok := os.LookupEnv("RENDER"); !ok {
		err := godotenv.Load()
		if err != nil {
			log.Println(" .env —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω (–ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫)")
		} else {
			log.Println(" .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
		}
	}

	InitDB()

	http.HandleFunc("/", prankHandler)
	http.HandleFunc("/count", countHandler)

	port := os.Getenv("PORT") // For Render
	if port == "" {
		port = "10000"
	}
	fmt.Println("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É", port)
	log.Fatal(http.ListenAndServe(":"+port, nil))
}

func prankHandler(w http.ResponseWriter, r *http.Request) {
	ip := r.RemoteAddr
	userAgent := r.UserAgent()

	// Cut port from IP
	if strings.Contains(ip, ":") {
		ip = strings.Split(ip, ":")[0]
	}

	_, err := DB.Exec(`insert into visits (ip, user_agent, visited_at) values ($1, $2, $3)`,
		ip, userAgent, time.Now())
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î:", err)
	}

	fmt.Fprintf(w, `
<!DOCTYPE html>
		<html lang="ru">
		<head>
			<meta charset="UTF-8">
			<title>–°—é—Ä–ø—Ä–∏–∑</title>
			<style>
				body { font-family: sans-serif; text-align: center; margin-top: 20%%; background-color: #fafafa; }
				h1 { color: #e91e63; }
			</style>
		</head>
		<body>
			<h1>–¢—ã –¥—É–º–∞–ª –±—É–¥–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ üçÜ –≤ OnlyFans!? –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å 1 –∞–ø—Ä–µ–ª—è 2026, —è —Ç–µ–±—è –Ω–∞–µ–±–∞–ª </h1>
		</body>
		</html>
	`)
}

func countHandler(w http.ResponseWriter, r *http.Request) {
	var count int
	err := DB.QueryRow("Select count(*) from visits").Scan(&count)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞:", err)
		w.WriteHeader(500)
		return
	}

	fmt.Fprintf(w, "–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: %d\n", count)
}
